[package]
name = "egui_backend"
version = "0.2.0"
edition = "2021"
description = "Traits to streamline egui window and render integrations"
license = "MIT"
# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html
[features]
default = ["egui_default_fonts"]
glfw = ["dep:glfw"]
# glfw-passthrough = ["dep:glfw-passthrough"]

sdl2 = ["dep:sdl2"]
winit = [
    "dep:winit",
    "dep:glutin",
    "dep:wasm-bindgen",
    "dep:web-sys",
    "web-sys?/Document",
    "web-sys?/HtmlCollection",
    "web-sys?/HtmlCanvasElement",
    "web-sys?/Window",
    "dep:getrandom",
]
glow = [
    "dep:glow",
    "dep:wasm-bindgen",
    "dep:web-sys",
    "web-sys?/WebGl2RenderingContext",
    "web-sys?/HtmlCanvasElement",
    "web-sys?/Window",
    "dep:getrandom",
    "dep:js-sys",
    "egui/bytemuck",
]
wgpu = ["dep:wgpu", "dep:pollster", "egui/bytemuck"]
three-d = ["dep:three-d", "glow"]
## [`bytemuck`](https://docs.rs/bytemuck) enables you to cast [`epaint::Vertex`], [`emath::Vec2`] etc to `&[u8]`.
egui_bytemuck = ["egui/bytemuck"]

## [`cint`](https://docs.rs/cint) enables interopability with other color libraries.
egui_cint = ["egui/cint"]

## Enable the [`hex_color`] macro.
egui_color-hex = ["egui/color-hex"]

## This will automatically detect deadlocks due to double-locking on the same thread.
## If your app freezes, you may want to enable this!
## Only affects [`epaint::mutex::RwLock`] (which egui uses a lot).
egui_deadlock_detection = ["egui/deadlock_detection"]

## If set, egui will use `include_bytes!` to bundle some fonts.
## If you plan on specifying your own fonts you may disable this feature.
egui_default_fonts = ["egui/default_fonts"]

## Enable additional checks if debug assertions are enabled (debug builds).
egui_extra_debug_asserts = ["egui/extra_debug_asserts"]
## Always enable additional checks.
egui_extra_asserts = ["egui/extra_asserts"]

## [`mint`](https://docs.rs/mint) enables interopability with other math libraries such as [`glam`](https://docs.rs/glam) and [`nalgebra`](https://docs.rs/nalgebra).
egui_mint = ["egui/mint"]

## Enable persistence of memory (window positions etc).
egui_persistence = ["egui/serde", "egui/ron"]

## Allow serialization using [`serde`](https://docs.rs/serde).
egui_serde = ["egui/serde"]


[dependencies]
raw-window-handle = "0.4"
egui = { version = "0.19.0", default-features = false }
tracing = { version = "0.1.36" }
intmap = { version = "2.0.0" }
bytemuck = { version = "1.12.1" }
# winit backend. 
winit = { version = "0.27", optional = true }
glow = { version = "0.11", optional = true }
three-d = { version = "0.13.0", optional = true }
wgpu = { version = "0.13", features = ["webgl"], optional = true }
pollster = { version = "0.2", optional = true }


# winit uses glutin on desktop to get opengl context
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
glutin = { version = "0.29", optional = true }

# glfw backend
glfw = { version = "0.45.0", optional = true }
# sdl2 backend
sdl2 = { version = "0.35", features = ["raw-window-handle"], optional = true }
# rend3
# rend3 = {version = "0.3.0"} # can't use it until it upgrades to use wgpu 0.13
# glfw passthrough version
# glfw-passthrough = { version = "0.44.1", optional = true }
# winit uses these to get html canvas from dom to use for window
# glow also uses these to get a webgl2 rendering context from canvas

[target.'cfg(target_arch = "wasm32")'.dependencies]
wasm-bindgen = { version = "0.2", optional = true }
web-sys = { version = "0.3", optional = true }
getrandom = { version = "0.2", features = [
    "js",
], optional = true } # https://github.com/emilk/egui/issues/2009
js-sys = { version = "0.3.60", optional = true }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
tracing-subscriber = { version = "0.3.15", features = ["env-filter"] }
tracing = { version = "0.1.36" }
